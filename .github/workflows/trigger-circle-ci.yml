name: Build On Demand
on:
  issue_comment:
    types: [created, edited]
jobs:
  debug:
    name: Debug
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "All event information:"
          cat << 'EOF'
          ${{ toJSON(github.event) }}
          EOF
      - run: |
          echo "Body of the comment:"
          cat << 'EOF'
          ${{ toJSON(github.event.comment.body) }}
          EOF
  trigger-circleci:
    name: Trigger end to end build
    # Only run if the comment was made on a PR and it contains the magic string
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/regression-test')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Target
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log(context)
              if (context.issue.number == null) {
                core.info(`NO PR found.`)
                return ""
              }
              const request = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              }
              core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
              const result = await github.rest.pulls.get(request)
              core.info(`PR Target ${result.data.base.ref}`)
              core.info(`PR Source ${result.data.head.ref}`)
              return result.data
            } catch (err) {
              core.error(`Request failed with error: ${err.message}`)
              core.error(`Stack trace: ${err.stack}`)
              return ""
            }
      - name: Trigger End-To-End Build
        run: |
          echo curl --request POST \
            --url "${CIRCLE_PIPELINE_URL}" \
            --header "Circle-Token: ${CCI_TOKEN}" \
            --header "content-type: application/json" \
            --data '{
            "definition_id": "${DEFINITION_ID}",
            "config": {"branch": "${GHA_SOURCE_BRANCH}"},
            "checkout": {"branch": "${GHA_SOURCE_BRANCH}"},
            "parameters": {"e2e-test": true}
            }'
        env:
          CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
          DEFINITION_ID: "5c5ab759-fd2b-5488-b668-f718495e99d3"
          CIRCLE_PIPELINE_URL: "https://circleci.com/api/v2/project/gh/simonwardjones/forget_code/run"
          GHA_SOURCE_BRANCH: ${{ fromJSON(steps.get_pr_info.outputs.result).head.ref }}
          GHA_TARGET_BRANCH: ${{ fromJSON(steps.get_pr_info.outputs.result).base.ref }}
          GHA_REF: refs/pull/${{fromJSON(steps.get_pr_info.outputs.result).number}}/merge
      - name: Add rocket emojis to the comment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const comment = await github.rest.reactions.createForIssueComment({
                ...context.repo,
                comment_id: context.comment.id,
                content: "rocket"
              });
            } catch (err) {
              core.error(`Request failed with error: ${err.message}`)
              core.error(`Stack trace: ${err.stack}`)
            }
